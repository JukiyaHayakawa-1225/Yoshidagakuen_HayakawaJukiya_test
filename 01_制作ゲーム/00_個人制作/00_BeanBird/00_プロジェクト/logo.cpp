//=============================================================================
//
// ロゴの処理 [logo.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "logo.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"

//=============================================================================
// ロゴのコンストラクタ
//=============================================================================
CLogo::CLogo(int nPriority) : CScene(nPriority)
{
	m_pTexture = NULL;							//テクスチャ
	m_col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);	//色の初期値
}
//=============================================================================
// ロゴのデストラクタ
//=============================================================================
CLogo::~CLogo()
{

}

//=============================================================================
// ロゴの初期化処理
//=============================================================================
HRESULT CLogo::Init(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//ポインタの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	VERTEX_2D*pVtx;	//頂点情報へのポインタ

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)& pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y + m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y + m_fHeight, 0.0f);

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点カラーの設定
	pVtx[0].col = m_col;
	pVtx[1].col = m_col;
	pVtx[2].col = m_col;
	pVtx[3].col = m_col;

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}

//=============================================================================
// ロゴの終了処理
//=============================================================================
void CLogo::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
	Release();
}

//=============================================================================
// ロゴの更新処理
//=============================================================================
void CLogo::Update(void)
{

}

//=============================================================================
// ロゴの描画処理
//=============================================================================
void CLogo::Draw(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//頂点バッファをデバイスのデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	//頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	//テクスチャの設定
	pDevice->SetTexture(0, m_pTexture);

	//ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
}
//=============================================================================
// オブジェクトの取得処理
//=============================================================================
void CLogo::BindTexture(LPDIRECT3DTEXTURE9 texture)
{
	m_pTexture = texture;
}
//=============================================================================
// ロゴの位置設置処理
//=============================================================================
void CLogo::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//=============================================================================
// ロゴの位置設置処理
//=============================================================================
void CLogo::SetWidth(float fWidth)
{
	m_fWidth = fWidth;
}
//=============================================================================
// ロゴの位置設置処理
//=============================================================================
void CLogo::SetHeight(float fHeight)
{
	m_fHeight = fHeight;
}
//=============================================================================
// ロゴの色設置処理
//=============================================================================
void CLogo::SetCol(D3DXCOLOR col)
{
	m_col = col;
}

//=============================================================================
//
// タイトルロゴの処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CTitleLogo::m_pTexture;
//=============================================================================
// タイトルロゴのコンストラクタ
//=============================================================================
CTitleLogo::CTitleLogo() : CLogo()
{
}
//=============================================================================
// タイトルロゴのデストラクタ
//=============================================================================
CTitleLogo::~CTitleLogo()
{
}

//=============================================================================
//タイトルロゴの生成
//=============================================================================
CTitleLogo *CTitleLogo::Create(D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CTitleLogo *pTitleLogo = NULL;
	if (pTitleLogo == NULL)
	{
		pTitleLogo = new CTitleLogo;				//シーンの動的確保
		if (pTitleLogo != NULL)
		{
			pTitleLogo->SetPos(pos);				//位置の設置
			pTitleLogo->SetWidth(fWidth);			//幅の設置
			pTitleLogo->SetHeight(fHeight);			//高さの設置
			pTitleLogo->BindTexture(m_pTexture);	//テクスチャ
			pTitleLogo->Init();						//初期化処理
		}
	}
	return pTitleLogo;								//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CTitleLogo::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\TitleLogo2.png",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CTitleLogo::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// タイトルロゴの初期化処理
//=============================================================================
HRESULT CTitleLogo::Init(void)
{
	//ロゴの描画処理
	CLogo::Init();

	return S_OK;
}

//=============================================================================
// タイトルロゴの終了処理
//=============================================================================
void CTitleLogo::Uninit(void)
{
	//終了処理
	CLogo::Uninit();
}

//=============================================================================
// タイトルロゴの更新処理
//=============================================================================
void CTitleLogo::Update(void)
{

}

//=============================================================================
// タイトルロゴの描画処理
//=============================================================================
void CTitleLogo::Draw(void)
{
	//ロゴの描画処理
	CLogo::Draw();
}

//=============================================================================
//
// リザルトロゴの処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CResultLogo::m_pTexture[MAX_RESULT] = {};

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// リザルトロゴのコンストラクタ
//=============================================================================
CResultLogo::CResultLogo() : CLogo()
{
}
//=============================================================================
// リザルトロゴのデストラクタ
//=============================================================================
CResultLogo::~CResultLogo()
{
}

//=============================================================================
//リザルトロゴの生成
//=============================================================================
CResultLogo *CResultLogo::Create(D3DXVECTOR3 pos, float fWidth, float fHeight,CResult::RESULT result)
{
	CResultLogo *pResultLogo = NULL;
	if (pResultLogo == NULL)
	{
		pResultLogo = new CResultLogo;		//シーンの動的確保
		if (pResultLogo != NULL)
		{
			pResultLogo->SetPos(pos);		//位置の設置
			pResultLogo->SetWidth(fWidth);	//幅の設置
			pResultLogo->SetHeight(fHeight);//高さの設置
			switch (result)
			{
			case CResult::RESULT_CLEAR://クリアの場合
				pResultLogo->BindTexture(m_pTexture[0]);
				break;
			case CResult::RESULT_GAMEOVER://オーバーの場合
				pResultLogo->BindTexture(m_pTexture[1]);
				break;
			}
			pResultLogo->Init();					//初期化処理
		}
	}
	return pResultLogo;					//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CResultLogo::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\gameclear_logo.png",
		&m_pTexture[0]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\gameover_logo.png",
		&m_pTexture[1]);


	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CResultLogo::Unload(void)
{
	for (int nCntResult = 0; nCntResult < MAX_RESULT; nCntResult++)
	{
		// テクスチャの破棄
		if (m_pTexture[nCntResult] != NULL)
		{
			m_pTexture[nCntResult]->Release();
			m_pTexture[nCntResult] = NULL;
		}
	}
}

//=============================================================================
// リザルトロゴの初期化処理
//=============================================================================
HRESULT CResultLogo::Init(void)
{
	//ロゴの描画処理
	CLogo::Init();

	return S_OK;
}

//=============================================================================
// リザルトロゴの終了処理
//=============================================================================
void CResultLogo::Uninit(void)
{
	//終了処理
	CLogo::Uninit();
}

//=============================================================================
// リザルトロゴの更新処理
//=============================================================================
void CResultLogo::Update(void)
{

}

//=============================================================================
// リザルトロゴの描画処理
//=============================================================================
void CResultLogo::Draw(void)
{
	//ロゴの描画処理
	CLogo::Draw();
}

//=============================================================================
//
// ランキングロゴの処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CRankingLogo::m_pTexture;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// ランキングロゴのコンストラクタ
//=============================================================================
CRankingLogo::CRankingLogo() : CLogo()
{
}
//=============================================================================
// ランキングロゴのデストラクタ
//=============================================================================
CRankingLogo::~CRankingLogo()
{
}

//=============================================================================
//ランキングロゴの生成
//=============================================================================
CRankingLogo *CRankingLogo::Create(D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CRankingLogo *pRankingLogo = NULL;
	if (pRankingLogo == NULL)
	{
		pRankingLogo = new CRankingLogo;		//シーンの動的確保
		if (pRankingLogo != NULL)
		{
			pRankingLogo->SetPos(pos);				//位置の設置
			pRankingLogo->SetWidth(fWidth);			//幅の設置
			pRankingLogo->SetHeight(fHeight);		//高さの設置
			pRankingLogo->BindTexture(m_pTexture);	//テクスチャ
			pRankingLogo->Init();					//初期化処理
		}
	}
	return pRankingLogo;					//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CRankingLogo::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\rankinglogo.png",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CRankingLogo::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// ランキングロゴの初期化処理
//=============================================================================
HRESULT CRankingLogo::Init(void)
{
	//ロゴの描画処理
	CLogo::Init();

	return S_OK;
}

//=============================================================================
// ランキングロゴの終了処理
//=============================================================================
void CRankingLogo::Uninit(void)
{
	//終了処理
	CLogo::Uninit();
}

//=============================================================================
// ランキングロゴの更新処理
//=============================================================================
void CRankingLogo::Update(void)
{

}

//=============================================================================
// ランキングロゴの描画処理
//=============================================================================
void CRankingLogo::Draw(void)
{
	//ロゴの描画処理
	CLogo::Draw();
}


//=============================================================================
//
// ランキングロゴの処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CRankingRank::m_pTexture;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// ランキングロゴのコンストラクタ
//=============================================================================
CRankingRank::CRankingRank() : CLogo()
{
}
//=============================================================================
// ランキングロゴのデストラクタ
//=============================================================================
CRankingRank::~CRankingRank()
{
}

//=============================================================================
//ランキングロゴの生成
//=============================================================================
CRankingRank *CRankingRank::Create(D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CRankingRank *pRankingRank = NULL;
	if (pRankingRank == NULL)
	{
		pRankingRank = new CRankingRank;		//シーンの動的確保
		if (pRankingRank != NULL)
		{
			pRankingRank->SetPos(pos);				//位置の設置
			pRankingRank->SetWidth(fWidth);			//幅の設置
			pRankingRank->SetHeight(fHeight);		//高さの設置
			pRankingRank->BindTexture(m_pTexture);	//テクスチャ
			pRankingRank->Init();					//初期化処理
		}
	}
	return pRankingRank;					//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CRankingRank::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\ranking_rank.png",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CRankingRank::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// ランキングロゴの初期化処理
//=============================================================================
HRESULT CRankingRank::Init(void)
{
	//ロゴの描画処理
	CLogo::Init();

	return S_OK;
}

//=============================================================================
// ランキングロゴの終了処理
//=============================================================================
void CRankingRank::Uninit(void)
{
	//終了処理
	CLogo::Uninit();
}

//=============================================================================
// ランキングロゴの更新処理
//=============================================================================
void CRankingRank::Update(void)
{

}

//=============================================================================
// ランキングロゴの描画処理
//=============================================================================
void CRankingRank::Draw(void)
{
	//ロゴの描画処理
	CLogo::Draw();
}


//=============================================================================
//
// ターゲットロゴの処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CTargetLogo::m_pTexture;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// ターゲットロゴのコンストラクタ
//=============================================================================
CTargetLogo::CTargetLogo() : CLogo(3)
{
}
//=============================================================================
// ターゲットロゴのデストラクタ
//=============================================================================
CTargetLogo::~CTargetLogo()
{
}

//=============================================================================
//ターゲットロゴの生成
//=============================================================================
CTargetLogo *CTargetLogo::Create(D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CTargetLogo *pTargetLogo = NULL;
	if (pTargetLogo == NULL)
	{
		pTargetLogo = new CTargetLogo;		//シーンの動的確保
		if (pTargetLogo != NULL)
		{
			pTargetLogo->SetPos(pos);				//位置の設置
			pTargetLogo->SetWidth(fWidth);			//幅の設置
			pTargetLogo->SetHeight(fHeight);		//高さの設置
			pTargetLogo->BindTexture(m_pTexture);	//テクスチャ
			pTargetLogo->Init();					//初期化処理
		}
	}
	return pTargetLogo;					//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CTargetLogo::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\target.png",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CTargetLogo::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// ターゲットロゴの初期化処理
//=============================================================================
HRESULT CTargetLogo::Init(void)
{
	//カウンターの初期化
	m_nCounter = 0;

	//ロゴの描画処理
	CLogo::Init();

	return S_OK;
}

//=============================================================================
// ターゲットロゴの終了処理
//=============================================================================
void CTargetLogo::Uninit(void)
{
	//終了処理
	CLogo::Uninit();
}

//=============================================================================
// ターゲットロゴの更新処理
//=============================================================================
void CTargetLogo::Update(void)
{
	m_nCounter++;

	if (m_nCounter >= 50)
	{
		CLogo::Uninit();
	}
}

//=============================================================================
// ターゲットロゴの描画処理
//=============================================================================
void CTargetLogo::Draw(void)
{
	//ロゴの描画処理
	CLogo::Draw();
}