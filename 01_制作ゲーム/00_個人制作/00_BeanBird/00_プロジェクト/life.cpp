//=============================================================================
//
// 体力の処理 [life.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "life.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "bullet.h"
#include "polygon.h"
#include "stock.h"
#include "player.h"
#include "fade.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
CPolygon *CLife::m_apPolygon[MAX_LIFE] = {};
int CLife::m_nLife = 0;
LPDIRECT3DTEXTURE9 CLife::m_pTexture = NULL;
//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// 体力のコンストラクタ
//=============================================================================
CLife::CLife() : CScene(6)
{
	m_nLife = 3;
}
//=============================================================================
// 体力のデストラクタ
//=============================================================================
CLife::~CLife()
{

}

//=============================================================================
//体力の生成
//=============================================================================
CLife *CLife::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CLife *pLife = NULL;
	if (pLife == NULL)
	{
		pLife = new CLife;							//シーンの動的確保
		for (int nCntNumber = 0; nCntNumber < MAX_LIFE; nCntNumber++)
		{
			pLife->SetPos(pos);				//位置の代入
			pLife->Init();					//初期化処理
			//数字の動的確保
			//m_apPolygon[nCntNumber] = new CPolygon;
			//ポリゴンの生成
			m_apPolygon[nCntNumber] = CPolygon::Create(D3DXVECTOR3(pos.x + (75 * nCntNumber), pos.y, pos.z), fWight, fHeight);

			//
			m_apPolygon[nCntNumber]->BindTexture(m_pTexture);
		}
	}
	return pLife;					//値を返す
}
//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CLife::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		TEXTURE_NAME011,
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CLife::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// 体力の初期化処理
//=============================================================================
HRESULT CLife::Init(void)
{
	return S_OK;
}

//=============================================================================
// 体力の終了処理
//=============================================================================
void CLife::Uninit(void)
{
	//体力の終了処理
	for (int nCntNumber = 0; nCntNumber < MAX_LIFE; nCntNumber++)
	{
		if (m_apPolygon[nCntNumber] != NULL)
		{
			//終了処理
			m_apPolygon[nCntNumber]->Uninit();
			//メモリの開放
			delete m_apPolygon[nCntNumber];
			//NULLにする
			m_apPolygon[nCntNumber] = NULL;
		}
	}
	Release();
}

//=============================================================================
// 体力の更新処理
//=============================================================================
void CLife::Update(void)
{

}

//=============================================================================
// 体力の描画処理
//=============================================================================
void CLife::Draw(void)
{
	for (int nCntScore = 0; nCntScore < m_nLife; nCntScore++)
	{
		//数字の描画処理
		m_apPolygon[nCntScore]->Draw();
	}
}

//=============================================================================
// 体力の設置処理
//=============================================================================
void CLife::SetLife(int nLife)
{
	//体力の加算
	m_nLife += nLife;
	if (m_nLife <= 0)
	{
		m_nLife = 0;
	}
}

//=============================================================================
// 体力の取得
//=============================================================================
int CLife::GetLife(void)
{
	//値を返す
	return m_nLife;
}


//=============================================================================
// 体力の設置処理
//=============================================================================
void CLife::SetPos(D3DXVECTOR3 pos)
{
}

//=============================================================================
// 体力の減少処理
//=============================================================================
void CLife::CutLife(int nLife)
{
	//体力の減算
	m_nLife -= nLife;
	int nStock;					//残機
	CStock *pStock = NULL;		//残機のポインタ
	if (pStock == NULL)
	{
		//残機の取得
		nStock = pStock->GetStock();
		if (m_nLife <= 0)
		{
			if (nStock >= 1)
			{
				m_nLife = 3;
			}
		}
	}
}