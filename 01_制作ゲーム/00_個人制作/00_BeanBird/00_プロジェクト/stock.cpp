//=============================================================================
//
// 残機の処理 [stock.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "stock.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "bullet.h"
#include "polygon.h"
#include "player.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
CPolygon *CStock::m_apPolygon[MAX_STOCK] = {};
int CStock::m_nStock = 0;
LPDIRECT3DTEXTURE9 CStock::m_pTexture;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// 残機のコンストラクタ
//=============================================================================
CStock::CStock() : CScene(6)
{
	m_nStock = 3;
}
//=============================================================================
// 残機のデストラクタ
//=============================================================================
CStock::~CStock()
{

}

//=============================================================================
//残機の生成
//=============================================================================
CStock *CStock::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CStock *pStock = NULL;
	if (pStock == NULL)
	{
		pStock = new CStock;		//シーンの動的確保
		for (int nCntNumber = 0; nCntNumber < MAX_STOCK; nCntNumber++)
		{
			//数字の動的確保
			//m_apPolygon[nCntNumber] = new CPolygon;
			//数字の生成
			m_apPolygon[nCntNumber] = CPolygon::Create(D3DXVECTOR3(pos.x + (75 * nCntNumber), pos.y, pos.z), fWight, fHeight);

			//
			m_apPolygon[nCntNumber]->BindTexture(m_pTexture);
		}
		pStock->Init();					//初期化処理
	}
	return pStock;					//値を返す
}

//=============================================================================
// オブジェクトのテクスチャ読み込み
//=============================================================================
HRESULT CStock::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		TEXTURE_NAME000,
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// オブジェクトのテクスチャ破棄
//=============================================================================
void CStock::Unload(void)
{
		// テクスチャの破棄
		if (m_pTexture != NULL)
		{
			m_pTexture->Release();
			m_pTexture = NULL;
		}
}

//=============================================================================
// 残機の初期化処理
//=============================================================================
HRESULT CStock::Init(void)
{
	m_nStock = 3;
	return S_OK;
}

//=============================================================================
// 残機の終了処理
//=============================================================================
void CStock::Uninit(void)
{
	//残機の終了処理
	for (int nCntNumber = 0; nCntNumber < MAX_STOCK; nCntNumber++)
	{
		if (m_apPolygon[nCntNumber] != NULL)
		{
			//終了処理
			m_apPolygon[nCntNumber]->Uninit();
			//メモリの開放
			delete m_apPolygon[nCntNumber];
			//NULLにする
			m_apPolygon[nCntNumber] = NULL;
		}
	}
	Release();
}

//=============================================================================
// 残機の更新処理
//=============================================================================
void CStock::Update(void)
{

}

//=============================================================================
// 残機の描画処理
//=============================================================================
void CStock::Draw(void)
{
	for (int nCntScore = 0; nCntScore < m_nStock; nCntScore++)
	{
		//数字の描画処理
		m_apPolygon[nCntScore]->Draw();
	}
}

//=============================================================================
// 残機の設置処理
//=============================================================================
void CStock::SetStock(int nStock)
{
	//残機の加算
	m_nStock += nStock;
}

//=============================================================================
// 残機の取得
//=============================================================================
int CStock::GetStock(void)
{
	//値を返す
	return m_nStock;
}


//=============================================================================
// 残機の設置処理
//=============================================================================
void CStock::SetPos(D3DXVECTOR3 pos)
{
}

//=============================================================================
// 残機の減少処理
//=============================================================================
void CStock::CutStock(int nStock)
{
	m_nStock -= nStock;
}