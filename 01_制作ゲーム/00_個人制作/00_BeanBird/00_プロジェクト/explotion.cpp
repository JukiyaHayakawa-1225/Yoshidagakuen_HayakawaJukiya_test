//=============================================================================
//
// 爆発の処理 [explotion.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "explotion.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CExplotion::m_pTexture = NULL;

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// 爆発のコンストラクタ
//=============================================================================
CExplotion::CExplotion() : CScene2D(3)
{
	m_nCounterAnim = 0;
	m_nPatternAnim = 0;
}
//=============================================================================
// 爆発のデストラクタ
//=============================================================================
CExplotion::~CExplotion()
{

}

//=============================================================================
//爆発の生成
//=============================================================================
CExplotion *CExplotion::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CExplotion *pExplotion = NULL;

	if (pExplotion == NULL)
	{
		pExplotion = new CExplotion;		//シーンの動的確保
		pExplotion->SetPos(pos);			//位置の代入
		pExplotion->SetWidth(fWight);		//幅の代入
		pExplotion->SetHeight(fHeight);		//高さの代入
		pExplotion->Init();					//初期化処理
		pExplotion->BindTexture(m_pTexture);
		pExplotion->SetCol(D3DXCOLOR(0.25f, 0.25f, 1.0f, 1.0f));
	}
	return pExplotion;					//値を返す
}

//=============================================================================
// 爆発のテクスチャ読み込み
//=============================================================================
HRESULT CExplotion::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		TEXTURE_NAME002,
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// 爆発のテクスチャ破棄
//=============================================================================
void CExplotion::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
// 爆発の初期化処理
//=============================================================================
HRESULT CExplotion::Init(void)
{
	//CScene2Dの初期化処理
	CScene2D::Init();

	//テクスチャ座標の設置
	SetTex(m_nPatternAnim,8 , 1);

	return S_OK;
}

//=============================================================================
// 爆発の終了処理
//=============================================================================
void CExplotion::Uninit(void)
{
	//CScene2Dの終了処理
	CScene2D::Uninit();
}

//=============================================================================
// 爆発の更新処理
//=============================================================================
void CExplotion::Update(void)
{
	m_nCounterAnim++;	//アニメーションカウンタを加算

	if ((m_nCounterAnim % 5) == 0)
	{
		// パターンNo.を更新
		m_nPatternAnim = (m_nPatternAnim + 1) % 8;

		//テクスチャ座標の設置
		SetTex(m_nPatternAnim,8 , 1);

		if (m_nPatternAnim == 0)
		{
			//終了処理
			Uninit();
		}
	}
}

//=============================================================================
// 爆発の描画処理
//=============================================================================
void CExplotion::Draw(void)
{
	//CScene2Dの描画処理
	CScene2D::Draw();
}