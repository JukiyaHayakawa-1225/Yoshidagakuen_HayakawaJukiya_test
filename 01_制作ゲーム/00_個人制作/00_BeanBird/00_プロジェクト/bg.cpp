//=============================================================================
//
// 背景の処理 [bg.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "bg.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "scene2D.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBg::m_pTexture = NULL;		//テクスチャのポインタ

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// オブジェクトのコンストラクタ
//=============================================================================
CBg::CBg(int nPriority) : CScene(nPriority)
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//位置の初期値
	m_move = 0;									//移動量の初期値
	m_fWidth = 0.0f;							//幅の初期値
	m_fHeight = 0.0f;							//高さの初期値
	m_col = D3DXCOLOR(1.0f, 1.0f,1.0f,1.0f);	//色の初期値
}
//=============================================================================
// オブジェクトのデストラクタ
//=============================================================================
CBg::~CBg()
{

}
//=============================================================================
// オブジェクトの初期化処理
//=============================================================================
HRESULT CBg::Init(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//ポインタの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	VERTEX_2D*pVtx;	//頂点情報へのポインタ

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)& pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y + m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y + m_fHeight, 0.0f);

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点カラーの設定
	pVtx[0].col = m_col;
	pVtx[1].col = m_col;
	pVtx[2].col = m_col;
	pVtx[3].col = m_col;

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}

//=============================================================================
// オブジェクトの終了処理
//=============================================================================
void CBg::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
	Release();
}

//=============================================================================
// オブジェクトの更新処理
//=============================================================================
void CBg::Update(void)
{

}

//=============================================================================
// オブジェクトの描画処理
//=============================================================================
void CBg::Draw(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//頂点バッファをデバイスのデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	//頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	//テクスチャの設定
	pDevice->SetTexture(0, m_pTexture);

	//ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
}

//=============================================================================
// オブジェクトの取得処理
//=============================================================================
void CBg::BindTexture(LPDIRECT3DTEXTURE9 texture)
{
	m_pTexture = texture;
}

//=============================================================================
// 背景の位置設置処理
//=============================================================================
void CBg::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}
//=============================================================================
// 背景の位置取得処理
//=============================================================================
void CBg::SetVtxPos(D3DXVECTOR3 pos)
{
	m_pos = pos;

	VERTEX_2D*pVtx;	//頂点情報へのポインタ

					//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)& pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y + m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y + m_fHeight, 0.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}
//=============================================================================
// 背景の幅設置処理
//=============================================================================
void CBg::SetWidth(float fWidth)
{
	m_fWidth = fWidth;
}
//=============================================================================
// 背景の高さ設置処理
//=============================================================================
void CBg::SetHeight(float fHeight)
{
	m_fHeight = fHeight;
}
//=============================================================================
// 背景の色設置処理
//=============================================================================
void CBg::SetCol(D3DXCOLOR col)
{
	m_col = col;
}
//=============================================================================
// 背景のテクスチャ設置処理
//=============================================================================
void CBg::SetTexMove(int move)
{
	m_move = move;	//移動量の代入

	VERTEX_2D*pVtx;	//頂点情報へのポインタ

	//頂点バッファをロックし、頂点データへのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f - (m_move * 0.0005f));
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f - (m_move * 0.0005f));
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f - (m_move * 0.0005f));
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f - (m_move * 0.0005f));

	// 頂点バッファをアンロック
	m_pVtxBuff->Unlock();

}
//=============================================================================
// 背景の位置取得処理
//=============================================================================
D3DXVECTOR3 CBg::GetPos(void)
{
	return m_pos;
}
//=============================================================================
//
// タイトル背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgTitle::m_pTexture = NULL;

//=============================================================================
// タイトル背景のコンストラクタ
//=============================================================================
CBgTitle::CBgTitle() : CBg(1)
{

}
//=============================================================================
// タイトル背景のデストラクタ
//=============================================================================
CBgTitle::~CBgTitle()
{

}
//=============================================================================
// タイトル背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgTitle::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\title000.jpg",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// タイトル背景のテクスチャ破棄
//=============================================================================
void CBgTitle::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
//タイトル背景の生成
//=============================================================================
CBgTitle *CBgTitle::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CBgTitle *pBg = NULL;				//背景のポインタ

	if (pBg == NULL)
	{
		pBg = new CBgTitle;				//動的確保
		pBg->SetPos(pos);				//位置の設置処理
		pBg->SetWidth(fWight);			//幅の設置処理
		pBg->SetHeight(fHeight);		//高さの設置処理
		pBg->BindTexture(m_pTexture);	//テクスチャ
		pBg->Init();					//初期化処理
	}
	return pBg;				//値を返す
}
//=============================================================================
// タイトル背景の初期化処理
//=============================================================================
HRESULT CBgTitle::Init(void)
{
	//背景の初期化処理
	CBg::Init();
	return S_OK;
}

//=============================================================================
// タイトル背景の終了処理
//=============================================================================
void CBgTitle::Uninit(void)
{
	//背景の終了処理
	CBg::Uninit();
}

//=============================================================================
// タイトル背景の更新処理
//=============================================================================
void CBgTitle::Update(void)
{
}
//=============================================================================
// タイトル背景の描画処理
//=============================================================================
void CBgTitle::Draw(void)
{
	//背景の描画処理
	CBg::Draw();
}

//=============================================================================
//
// チュートリアル背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgTutorial::m_apTexture[2] = {};
CBgTutorial::TUTORIAL_STATE CBgTutorial::m_state = STATE_NOMAL;

//=============================================================================
// チュートリアル背景のコンストラクタ
//=============================================================================
CBgTutorial::CBgTutorial() : CBg(1)
{
	for (int nCntTutorial = 0; nCntTutorial < 2; nCntTutorial++)
	{
		m_apScene2D[nCntTutorial] = NULL;
	}
}
//=============================================================================
// チュートリアル背景のデストラクタ
//=============================================================================
CBgTutorial::~CBgTutorial()
{

}

//=============================================================================
// チュートリアル背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgTutorial::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\tutorial.png",
		&m_apTexture[0]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\tutorial1.png",
		&m_apTexture[1]);

	return S_OK;
}

//=============================================================================
// チュートリアル背景のテクスチャ破棄
//=============================================================================
void CBgTutorial::Unload(void)
{
	for (int nCntTutorial = 0; nCntTutorial < 2; nCntTutorial++)
	{
		// テクスチャの破棄
		if (m_apTexture[nCntTutorial] != NULL)
		{
			m_apTexture[nCntTutorial]->Release();
			m_apTexture[nCntTutorial] = NULL;
		}
	}
}
//=============================================================================
//チュートリアル背景の生成
//=============================================================================
CBgTutorial *CBgTutorial::Create(D3DXVECTOR3 pos, float fWight, float fHeight, CBgTutorial::BG_TYPE type)
{
	CBgTutorial *pBg = NULL;			//背景のポインタ
	float Pos = 0;
	if (pBg == NULL)
	{
		pBg = new CBgTutorial;			//動的確保
		if (pBg != NULL)
		{
			for (int nCntTutorial = 0; nCntTutorial < 2; nCntTutorial++)
			{
				pBg->m_apScene2D[nCntTutorial] = new CScene2D(1);								//動的確保
				pBg->m_apScene2D[nCntTutorial]->SetPos(D3DXVECTOR3(pos.x + Pos, pos.y, pos.z));	//位置の設置処理
				pBg->m_apScene2D[nCntTutorial]->SetWidth(fWight);								//幅の設置処理
				pBg->m_apScene2D[nCntTutorial]->SetHeight(fHeight);								//高さの設置処理
				pBg->m_apScene2D[nCntTutorial]->Init();											//初期化処理
				pBg->m_apScene2D[nCntTutorial]->BindTexture(m_apTexture[nCntTutorial]);
				Pos += SCREEN_WIDTH;
			}
		}
		pBg->Init();					//初期化処理
	}
	return pBg;							//値を返す
}
//=============================================================================
// チュートリアル背景の初期化処理
//=============================================================================
HRESULT CBgTutorial::Init(void)
{
	m_state = STATE_NOMAL;	//状態を初期化
	m_moveTimer = 0;		//移動タイマー初期化
	CBg::Init();			//背景の初期化処理

	return S_OK;
}

//=============================================================================
// チュートリアル背景の終了処理
//=============================================================================
void CBgTutorial::Uninit(void)
{
	for (int nCntBg = 0; nCntBg < 2; nCntBg++)
	{
		//背景の終了処理
		m_apScene2D[nCntBg]->Uninit();
		m_apScene2D[nCntBg] = NULL;
	}
	Release();
}

//=============================================================================
// チュートリアル背景の更新処理
//=============================================================================
void CBgTutorial::Update(void)
{
	//位置の取得
	D3DXVECTOR3 pos;
	pos = m_apScene2D[0]->GetPos();
	D3DXVECTOR3 pos1;
	pos1 = m_apScene2D[1]->GetPos();

	switch (m_state)
	{
	case STATE_NOMAL:	//通常状態の場合

		break;
	case STATE_MOVE:	//移動状態の場合
		//位置の移動
		pos.x -= 20.0f;
		pos1.x -= 20.0f;
		if (pos.x == -640.0f && pos1.x == SCREEN_WIDTH / 2)
		{//指定の範囲に達した場合通常状態に戻す
			m_state = STATE_NOMAL;
		}
		break;
	case STATE_REMOVE:	//逆移動の場合
		//位置の移動
		pos.x += 20.0f;
		pos1.x += 20.0f;
		if (pos.x == SCREEN_WIDTH / 2 && pos1.x == SCREEN_WIDTH + 640.0f)
		{//指定の範囲に達した場合通常状態に戻す
			m_state = STATE_NOMAL;
		}
		break;
	}
	//位置の設置処理
	m_apScene2D[0]->SetVtxPos(pos);
	m_apScene2D[1]->SetVtxPos(pos1);
}
//=============================================================================
// チュートリアル背景の描画処理
//=============================================================================
void CBgTutorial::Draw(void)
{

}
//=============================================================================
// チュートリアル背景の状態取得処理
//=============================================================================
CBgTutorial::TUTORIAL_STATE CBgTutorial::GetTutorialState(void)
{
	return m_state;
}
//=============================================================================
// チュートリアル背景の設置処理
//=============================================================================
void CBgTutorial::SetTutorialState(CBgTutorial::TUTORIAL_STATE state)
{
	m_state = state;
}

//=============================================================================
//
// ゲーム背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgGame::m_pTexture= NULL;

//=============================================================================
// ゲーム背景のコンストラクタ
//=============================================================================
CBgGame::CBgGame() : CBg(1)
{
	m_pScene2D = NULL;
}
//=============================================================================
// ゲーム背景のデストラクタ
//=============================================================================
CBgGame::~CBgGame()
{

}
//=============================================================================
// ゲーム背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgGame::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		TEXTURE_NAME003,
		&m_pTexture);
	return S_OK;
}

//=============================================================================
// ゲーム背景のテクスチャ破棄
//=============================================================================
void CBgGame::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
//ゲーム背景の生成
//=============================================================================
CBgGame *CBgGame::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CBgGame *pBg = NULL;	//背景のポインタ

	if (pBg == NULL)
	{
		pBg = new CBgGame;	//動的確保

			if (pBg->m_pScene2D == NULL)
			{
				pBg->m_pScene2D = new CScene2D(1);					//動的確保
				pBg->m_pScene2D->SetPos(pos);						//位置の設置処理
				pBg->m_pScene2D->SetWidth(fWight);					//幅の設置処理
				pBg->m_pScene2D->SetHeight(fHeight);				//高さの設置処理
				pBg->m_pScene2D->Init();							//初期化処理
				pBg->m_pScene2D->BindTexture(m_pTexture);			//テクスチャ
			}
		pBg->Init();		//初期化処理
	}
	return pBg;				//値を返す
}
//=============================================================================
// ゲーム背景の初期化処理
//=============================================================================
HRESULT CBgGame::Init(void)
{
	//背景の初期化処理
	CBg::Init();
	return S_OK;
}

//=============================================================================
// ゲーム背景の終了処理
//=============================================================================
void CBgGame::Uninit(void)
{

	//背景の終了処理
	m_pScene2D->Uninit();
	m_pScene2D = NULL;
	Release();
}

//=============================================================================
// ゲーム背景の更新処理
//=============================================================================
void CBgGame::Update(void)
{
	LPDIRECT3DVERTEXBUFFER9 pVtxBuff;

	VERTEX_2D *pVtx;	// 頂点情報へのポインタ

	m_nMoveSpeed++;		//移動量の加算

	pVtxBuff = m_pScene2D->GetVtx();

	//頂点バッファをロックし、頂点データへのポインタを取得
	pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f - (m_nMoveSpeed * 0.00025f));
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f - (m_nMoveSpeed * 0.00025f));
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f - (m_nMoveSpeed * 0.00025f));
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f - (m_nMoveSpeed * 0.00025f));

	// 頂点バッファをアンロック
	pVtxBuff->Unlock();
}
//=============================================================================
// ゲーム背景の描画処理
//=============================================================================
void CBgGame::Draw(void)
{
}

//=============================================================================
//
// リザルト背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgResult::m_pTexture[MAX_RESULT] = {};
//=============================================================================
// リザルト背景のコンストラクタ
//=============================================================================
CBgResult::CBgResult() : CBg(1)
{

}
//=============================================================================
// リザルト背景のデストラクタ
//=============================================================================
CBgResult::~CBgResult()
{

}
//=============================================================================
// リザルト背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgResult::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\gameclear.jpg",
		&m_pTexture[0]);

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\gameover.jpg",
		&m_pTexture[1]);
	return S_OK;
}

//=============================================================================
// リザルト背景のテクスチャ破棄
//=============================================================================
void CBgResult::Unload(void)
{
	for (int nCntResult = 0; nCntResult < MAX_RESULT; nCntResult++)
	{
		// テクスチャの破棄
		if (m_pTexture[nCntResult] != NULL)
		{
			m_pTexture[nCntResult]->Release();
			m_pTexture[nCntResult] = NULL;
		}
	}
}
//=============================================================================
//リザルト背景の生成
//=============================================================================
CBgResult *CBgResult::Create(D3DXVECTOR3 pos, float fWight, float fHeight,CResult::RESULT result)
{
	CBgResult *pBg = NULL;	//背景のポインタ

	if (pBg == NULL)
	{
		pBg = new CBgResult;		//動的確保
		pBg->SetPos(pos);			//位置の設置処理
		pBg->SetWidth(fWight);		//幅の設置処理
		pBg->SetHeight(fHeight);	//高さの設置処理
		switch (result)
		{
		case CResult::RESULT_CLEAR:			//クリア
			pBg->BindTexture(m_pTexture[0]);
			break;
		case CResult::RESULT_GAMEOVER:		//オーバー
			pBg->BindTexture(m_pTexture[1]);
			break;
		}
		pBg->Init();				//初期化処理
	}
	return pBg;						//値を返す
}
//=============================================================================
// リザルト背景の初期化処理
//=============================================================================
HRESULT CBgResult::Init(void)
{
	//背景の初期化処理
	CBg::Init();
	return S_OK;
}

//=============================================================================
// リザルト背景の終了処理
//=============================================================================
void CBgResult::Uninit(void)
{
	//背景の終了処理
	CBg::Uninit();
}

//=============================================================================
// リザルト背景の更新処理
//=============================================================================
void CBgResult::Update(void)
{
}
//=============================================================================
// リザルト背景の描画処理
//=============================================================================
void CBgResult::Draw(void)
{
	//背景の描画処理
	CBg::Draw();
}

//=============================================================================
//
// ランキング背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgRanking::m_pTexture = NULL;
//=============================================================================
// ランキング背景のコンストラクタ
//=============================================================================
CBgRanking::CBgRanking() : CBg(1)
{

}
//=============================================================================
// ランキング背景のデストラクタ
//=============================================================================
CBgRanking::~CBgRanking()
{

}
//=============================================================================
// ランキング背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgRanking::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\ranking000.jpg",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// ランキング背景のテクスチャ破棄
//=============================================================================
void CBgRanking::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
//ランキング背景の生成
//=============================================================================
CBgRanking *CBgRanking::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CBgRanking *pBg = NULL;				//背景のポインタ

	if (pBg == NULL)
	{
		pBg = new CBgRanking;			//動的確保
		pBg->SetPos(pos);				//位置の設置処理
		pBg->SetWidth(fWight);			//幅の設置処理
		pBg->SetHeight(fHeight);		//高さの設置処理
		pBg->BindTexture(m_pTexture);	//テクスチャ
		pBg->Init();					//初期化処理
	}
	return pBg;				//値を返す
}
//=============================================================================
// ランキング背景の初期化処理
//=============================================================================
HRESULT CBgRanking::Init(void)
{
	//背景の初期化処理
	CBg::Init();
	return S_OK;
}

//=============================================================================
// ランキング背景の終了処理
//=============================================================================
void CBgRanking::Uninit(void)
{
	//背景の終了処理
	CBg::Uninit();
}

//=============================================================================
// ランキング背景の更新処理
//=============================================================================
void CBgRanking::Update(void)
{
}
//=============================================================================
// ランキング背景の描画処理
//=============================================================================
void CBgRanking::Draw(void)
{
	//背景の描画処理
	CBg::Draw();
}

//=============================================================================
//
// UI背景の処理
//
//=============================================================================
//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CBgUI::m_pTexture = NULL;
//=============================================================================
// UI背景のコンストラクタ
//=============================================================================
CBgUI::CBgUI() : CBg(4)
{

}
//=============================================================================
// UI背景のデストラクタ
//=============================================================================
CBgUI::~CBgUI()
{

}
//=============================================================================
// UI背景のテクスチャ読み込み
//=============================================================================
HRESULT CBgUI::Load(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	//テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice,
		"data\\TEXTURE\\ranking000.jpg",
		&m_pTexture);

	return S_OK;
}

//=============================================================================
// UI背景のテクスチャ破棄
//=============================================================================
void CBgUI::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
//=============================================================================
//UI背景の生成
//=============================================================================
CBgUI *CBgUI::Create(D3DXVECTOR3 pos, float fWight, float fHeight)
{
	CBgUI *pBg = NULL;				//背景のポインタ

	if (pBg == NULL)
	{
		pBg = new CBgUI;				//動的確保
		pBg->SetPos(pos);				//位置の設置処理
		pBg->SetWidth(fWight);			//幅の設置処理
		pBg->SetHeight(fHeight);		//高さの設置処理
		pBg->BindTexture(m_pTexture);	//テクスチャ
		pBg->Init();					//初期化処理
	}
	return pBg;							//値を返す
}
//=============================================================================
// UI背景の初期化処理
//=============================================================================
HRESULT CBgUI::Init(void)
{
	//背景の初期化処理
	CBg::Init();
	return S_OK;
}

//=============================================================================
// UI背景の終了処理
//=============================================================================
void CBgUI::Uninit(void)
{
	//背景の終了処理
	CBg::Uninit();
}

//=============================================================================
// UI背景の更新処理
//=============================================================================
void CBgUI::Update(void)
{
}
//=============================================================================
// UI背景の描画処理
//=============================================================================
void CBgUI::Draw(void)
{
	//背景の描画処理
	CBg::Draw();
}
